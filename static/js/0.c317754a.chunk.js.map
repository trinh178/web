{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/utils/isPrimitive.ts","../../src/logic/getFieldsValues.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getFieldArrayParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx","../../src/logic/getInputValue.ts","../../src/controller.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","key","newValue","objValue","isObject","isNaN","data","val","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","get","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","setFieldArrayDirtyFields","defaultValues","dirtyFields","parentName","search","output","isString","startsWith","find","deepMerge","target","source","isPrimitive","targetValue","sourceValue","transformToNestObject","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","isErrorStateChanged","errors","error","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","isMessage","validateAllFieldCriteria","types","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","requiredValue","requiredMessage","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","isWeb","copy","File","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","getFieldArrayParentName","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","lastIndexOf","currentError","validateResolver","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","combinedDefaultValues","fieldArrayValue","assignWatchFields","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","isNameInFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","isSelectInput","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","control","React.useMemo","prop","FormContext","React.createContext","displayName","useFormContext","React.useContext","Controller","as","render","onFocus","rest","methods","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","event","getInputValue","registerField","defineProperty","onBlur","onChange","props","React.isValidElement","React.cloneElement","React.createElement"],"mappings":"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","file":"static/js/0.c317754a.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: [] | string) =>\n  !Array.isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          if (isUndefined(field.ref.focus())) {\n            break;\n          }\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (Array.isArray(options) && options.length) {\n      compact(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !compact(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\n\nexport default function setFieldArrayDirtyFields<\n  T extends U,\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setFieldArrayDirtyFields(\n          values[index][key],\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n    !dirtyFields.length &&\n      parentNode &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields.length ? dirtyFields : undefined;\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    transformToNestObject({ ...((shallowFieldsStateRef || {}).current || {}) }),\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isPrimitive from './isPrimitive';\n\nexport default function cloneObject<T extends unknown>(\n  data: T,\n  isWeb: boolean,\n): T {\n  let copy: any;\n\n  if (isPrimitive(data) || (isWeb && data instanceof File)) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key), isWeb));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key], isWeb);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const fieldArrayValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : cloneObject(defaultValues, isWeb),\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(\n          formValues,\n          isEmptyObject(defaultValuesRef.current)\n            ? defaultValuesAtRenderRef.current\n            : defaultValuesRef.current,\n        );\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesAtRenderRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...state,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = (\n          await validateField<TFieldValues>(\n            fieldsRef,\n            isValidateAllFieldCriteria,\n            fieldsRef.current[name] as Field,\n            shallowFieldsStateRef,\n          )\n        )[name];\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isUndefined(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig = {},\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[name] = value;\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: TFieldValue extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n    (config || {}).shouldValidate && trigger(name as any);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (!error && resolverRef.current) {\n              const parentNodeName = name.substring(\n                0,\n                name.lastIndexOf('.') > name.lastIndexOf('[')\n                  ? name.lastIndexOf('.')\n                  : name.lastIndexOf('['),\n              );\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data, isWeb);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(fieldsRef, shallowFieldsStateRef),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length ||\n            !fieldArrayValue.length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(fieldsRef, shallowFieldsStateRef, true),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(\n      values || defaultValuesRef.current,\n      isWeb,\n    );\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values, isWeb) || {};\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n    resolver && readFormStateRef.current.isValid && validateResolver();\n\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n    return () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n      shallowFieldsStateRef.current = {};\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(onFocus || (() => ref.current.focus()));\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty(\n          {\n            name,\n            focus: onFocusRef.current,\n          },\n          VALUE,\n          {\n            set(data) {\n              setInputStateValue(data);\n              valueRef.current = data;\n            },\n            get() {\n              return valueRef.current;\n            },\n          },\n        ),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(() => () => unregister(name), [unregister, name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if ((!as && !render) || (as && render)) {\n        console.warn(\n          `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  }, [\n    name,\n    touched,\n    updateFormState,\n    shouldValidate,\n    trigger,\n    readFormStateRef,\n  ]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, commonTask, name, shouldValidate],\n  );\n\n  const commonProps = {\n    onChange,\n    onBlur,\n    name,\n    value,\n    ref,\n  };\n\n  const props = {\n    ...rest,\n    ...commonProps,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render(commonProps)\n    : null;\n};\n\nexport { Controller };\n"],"sourceRoot":""}